apiVersion: apps/v1
kind: Deployment
metadata:
  name: helloworld
  labels:
    app: helloworld
spec:
  replicas: 1
  selector:
    matchLabels:
      app: helloworld
  template:
    metadata:
      labels:
        app: helloworld
    spec:
      containers:
      - name: helloworld
        image: gcr.io/kubernetestutorial-226819/helloworld:latest
        ports:
        - containerPort: 8080

---

kind: Service
apiVersion: v1
metadata:
  name: helloworld
spec:
  selector:
    app: helloworld
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080

---

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: redis-volumeclaim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 250Mi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis
        command: ["redis-server", "--appendonly", "yes"]
        ports:
        - containerPort: 6379
        volumeMounts:
          - name: redis-persistent-storage
            mountPath: /data
      volumes:
        - name: redis-persistent-storage
          persistentVolumeClaim:
            claimName: redis-volumeclaim

---

kind: Service
apiVersion: v1
metadata:
  name: redis
spec:
  selector:
    app: redis
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379

---

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: riak-volumeclaim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 250Mi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: riak
  labels:
    app: riak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: riak
  template:
    metadata:
      labels:
        app: riak
    spec:
      containers:
      - name: riak
        image: lapax/riak
        ports:
        - containerPort: 8087
        volumeMounts:
          - name: riak-persistent-storage
            mountPath: /var/lib/riak
      volumes:
        - name: riak-persistent-storage
          persistentVolumeClaim:
            claimName: riak-volumeclaim

---

kind: Service
apiVersion: v1
metadata:
  name: riak
spec:
  selector:
    app: riak
  ports:
  - protocol: TCP
    port: 8087
    targetPort: 8087

---

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mysql-volumeclaim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.6
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        - name: MYSQL_DATABASE
          value: 7geese_dev
        - name: MYSQL_USER
          value: sevengeese
        volumeMounts:
          - name: mysql-persistent-storage
            mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-volumeclaim

---

kind: Service
apiVersion: v1
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
  - protocol: TCP
    port: 3306
    targetPort: 3306

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: memcached
  labels:
    app: memcached
spec:
  replicas: 1
  selector:
    matchLabels:
      app: memcached
  template:
    metadata:
      labels:
        app: memcached
    spec:
      containers:
      - name: memcached
        image: memcached
        ports:
        - containerPort: 11211

---

kind: Service
apiVersion: v1
metadata:
  name: memcached
spec:
  selector:
    app: memcached
  ports:
  - protocol: TCP
    port: 11211
    targetPort: 11211

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sevengeese
  labels:
    app: sevengeese
spec:
  replicas: 3
  selector:
    matchLabels:
      app: sevengeese
  template:
    metadata:
      labels:
        app: sevengeese
    spec:
      containers:
      - name: sevengeese
        image: gcr.io/kubernetestutorial-226819/7geese:latest
        imagePullPolicy: Always
        command: ["/7Geese/manage.py", "runserver", "0.0.0.0:8000"]
        ports:
        - containerPort: 8000

---

kind: Service
apiVersion: v1
metadata:
  name: sevengeese
spec:
  selector:
    app: sevengeese
  ports:
  - protocol: TCP
    port: 8000
    targetPort: 8000

---

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - image: nginx:1.15.3-alpine
        name: nginx
        ports:
        - name: http
          containerPort: 80
          hostPort: 80
        volumeMounts:
        - name: "config"
          mountPath: "/etc/nginx"
      volumes:
      - name: config
        configMap:
          name: nginx-conf

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
data:
  nginx.conf: |
    worker_processes 1;
    error_log /dev/stdout info;

    events {
      worker_connections 10;
    }

    http {
      access_log /dev/stdout;

      server {
        listen 80;
        location / {
          proxy_pass http://sevengeese.default.svc.cluster.local:8000;
        }
      }
    }